// Package trees provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package trees

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get dico values for the table passed in parameter
	// (GET /dico/{table})
	GetDicoTable(ctx echo.Context, table GetDicoTableParamsTable) error
	// Get dico values
	// (GET /gestion_com/emplacements)
	GetEmplacements(ctx echo.Context) error
	// Get centroid
	// (GET /gestion_com/emplacements/centroid/{emplacementId})
	GetGestionComEmplacementsCentroidEmplacementId(ctx echo.Context, emplacementId int32) error
	// Get dico values
	// (GET /gestion_com/emplacements/{secteur})
	GetGestionComEmplacementsSecteur(ctx echo.Context, secteur string) error
	// Get dico values
	// (GET /gestion_com/secteurs)
	GetGestionComSecteurs(ctx echo.Context) error
	// Center of building
	// (GET /thing/buildings/center/{addressId})
	GetBuildingCenter(ctx echo.Context, addressId int32) error
	// Buildings numbers list
	// (GET /thing/buildings/numbers/{streetId})
	GetBuildingsNumbers(ctx echo.Context, streetId int32) error
	// Streets list
	// (GET /thing/streets)
	GetStreets(ctx echo.Context) error
	// List returns a list of trees
	// (GET /trees)
	List(ctx echo.Context, params ListParams) error
	// Create will create a new tree
	// (POST /trees)
	Create(ctx echo.Context) error
	// Delete allows to delete a specific treeId
	// (DELETE /trees/{treeId})
	Delete(ctx echo.Context, treeId int32) error
	// Get will retrieve in backend all information about a specific treeId
	// (GET /trees/{treeId})
	Get(ctx echo.Context, treeId int32) error
	// Update allows to modify information about a specific treeId
	// (PUT /trees/{treeId})
	Update(ctx echo.Context, treeId int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDicoTable converts echo context to params.
func (w *ServerInterfaceWrapper) GetDicoTable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "table" -------------
	var table GetDicoTableParamsTable

	err = runtime.BindStyledParameterWithLocation("simple", false, "table", runtime.ParamLocationPath, ctx.Param("table"), &table)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter table: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDicoTable(ctx, table)
	return err
}

// GetEmplacements converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmplacements(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmplacements(ctx)
	return err
}

// GetGestionComEmplacementsCentroidEmplacementId converts echo context to params.
func (w *ServerInterfaceWrapper) GetGestionComEmplacementsCentroidEmplacementId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "emplacementId" -------------
	var emplacementId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "emplacementId", runtime.ParamLocationPath, ctx.Param("emplacementId"), &emplacementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emplacementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGestionComEmplacementsCentroidEmplacementId(ctx, emplacementId)
	return err
}

// GetGestionComEmplacementsSecteur converts echo context to params.
func (w *ServerInterfaceWrapper) GetGestionComEmplacementsSecteur(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "secteur" -------------
	var secteur string

	err = runtime.BindStyledParameterWithLocation("simple", false, "secteur", runtime.ParamLocationPath, ctx.Param("secteur"), &secteur)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter secteur: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGestionComEmplacementsSecteur(ctx, secteur)
	return err
}

// GetGestionComSecteurs converts echo context to params.
func (w *ServerInterfaceWrapper) GetGestionComSecteurs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGestionComSecteurs(ctx)
	return err
}

// GetBuildingCenter converts echo context to params.
func (w *ServerInterfaceWrapper) GetBuildingCenter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "addressId" -------------
	var addressId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "addressId", runtime.ParamLocationPath, ctx.Param("addressId"), &addressId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addressId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBuildingCenter(ctx, addressId)
	return err
}

// GetBuildingsNumbers converts echo context to params.
func (w *ServerInterfaceWrapper) GetBuildingsNumbers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "streetId" -------------
	var streetId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "streetId", runtime.ParamLocationPath, ctx.Param("streetId"), &streetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter streetId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBuildingsNumbers(ctx, streetId)
	return err
}

// GetStreets converts echo context to params.
func (w *ServerInterfaceWrapper) GetStreets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStreets(ctx)
	return err
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete(ctx, treeId)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx, treeId)
	return err
}

// Update converts echo context to params.
func (w *ServerInterfaceWrapper) Update(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update(ctx, treeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dico/:table", wrapper.GetDicoTable)
	router.GET(baseURL+"/gestion_com/emplacements", wrapper.GetEmplacements)
	router.GET(baseURL+"/gestion_com/emplacements/centroid/:emplacementId", wrapper.GetGestionComEmplacementsCentroidEmplacementId)
	router.GET(baseURL+"/gestion_com/emplacements/:secteur", wrapper.GetGestionComEmplacementsSecteur)
	router.GET(baseURL+"/gestion_com/secteurs", wrapper.GetGestionComSecteurs)
	router.GET(baseURL+"/thing/buildings/center/:addressId", wrapper.GetBuildingCenter)
	router.GET(baseURL+"/thing/buildings/numbers/:streetId", wrapper.GetBuildingsNumbers)
	router.GET(baseURL+"/thing/streets", wrapper.GetStreets)
	router.GET(baseURL+"/trees", wrapper.List)
	router.POST(baseURL+"/trees", wrapper.Create)
	router.DELETE(baseURL+"/trees/:treeId", wrapper.Delete)
	router.GET(baseURL+"/trees/:treeId", wrapper.Get)
	router.PUT(baseURL+"/trees/:treeId", wrapper.Update)

}
