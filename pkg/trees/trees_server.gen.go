// Package trees provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package trees

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List returns a list of trees
	// (GET /trees)
	List(ctx echo.Context, params ListParams) error
	// Create will create a new tree
	// (POST /trees)
	Create(ctx echo.Context) error
	// Delete allows to delete a specific treeId
	// (DELETE /trees/{treeId})
	Delete(ctx echo.Context, treeId int32) error
	// Get will retrieve in backend all information about a specific treeId
	// (GET /trees/{treeId})
	Get(ctx echo.Context, treeId int32) error
	// Update allows to modify information about a specific treeId
	// (PUT /trees/{treeId})
	Update(ctx echo.Context, treeId int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete(ctx, treeId)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx, treeId)
	return err
}

// Update converts echo context to params.
func (w *ServerInterfaceWrapper) Update(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "treeId" -------------
	var treeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "treeId", runtime.ParamLocationPath, ctx.Param("treeId"), &treeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter treeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update(ctx, treeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/trees", wrapper.List)
	router.POST(baseURL+"/trees", wrapper.Create)
	router.DELETE(baseURL+"/trees/:treeId", wrapper.Delete)
	router.GET(baseURL+"/trees/:treeId", wrapper.Get)
	router.PUT(baseURL+"/trees/:treeId", wrapper.Update)

}
