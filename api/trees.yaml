---
openapi: 3.0.3
info:
  title: Sanarbo OpenAPI Spec
  description: OpenApi Specification for an API related to sanarbo (health of trees)
  contact:
    name: sanarbo API Team
    url: https://goeland.io
    email: sanarbo@goeland.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
- url: https://api.goeland.io/sanarbo
paths:
  /trees:
    get:
      summary: List returns a list of trees
      description: Returns the trees in an array
      operationId: List
      parameters:
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        description: number of rows to skip before beginning to return rows 
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get List of trees response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeList'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    post:
      summary: Create will create a new tree
      description: Creates a new tree
      operationId: Create
      requestBody:
        description: Object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tree'
        required: true
      responses:
        "201":
          description: Object creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /trees/{treeId}:
    get:
      summary: Get will retrieve in backend all information about a specific treeId
      description: Retrieve a specific tree
      operationId: Get
      parameters:
      - name: treeId
        in: path
        description: Id of the tree
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get tree successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        "401":
          description: Access token is missing or invalid
        "404":
          description: get trees response when treeId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    put:
      summary: Update allows to modify information about a specific treeId
      description: Updates the status of a tree
      operationId: Update
      parameters:
      - name: treeId
        in: path
        description: Id of the tree
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        description: informations related to the tree
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tree'
      responses:
        "200":
          description: put trees successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        "401":
          description: Access token is missing or invalid
        "404":
          description: put tree response when treeId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
    delete:
      summary: Delete allows to delete a specific treeId
      description: delete a tree
      operationId: Delete
      parameters:
      - name: treeId
        in: path
        description: Id of the tree
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: delete tree successful no content
        "401":
          description: Access token is missing or invalid
        "404":
          description: delete tree response when treeId was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - JWTAuth: []
  /validation:
    get:
      summary: Get list of tress to be validated
      description: Returns the correspondant trees in an array
      operationId: ValidationList
      parameters:
      - name: secteur
        in: query
        description: sector where trees must be located
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: emplacement
        in: query
        description: location where trees must be located
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: get List of trees response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationList'
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - JWTAuth: []
    post:
      summary: Save will save the validation for a group of trees
      description: Save the validation for a group of trees
      operationId: SaveValidation
      requestBody:
        description: Array of ids of trees to validate
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TreesToValidate'
        required: true
      responses:
        "200":
          description: svae validation successful response
          content:
            text/plain:
              schema: {
                type: string
              }
        "401":
          description: Access token is missing or invalid
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - JWTAuth: []
  /dico/{table}:
    get:
      summary: Get dico values for the table passed in parameter
      description: get dico values
      parameters:
        - name: table
          in: path
          description: name of the dico table
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - "validation"
              - "to_be_checked"
              - "note"
              - "entourage"
              - "check"
              - "rev_surface"
              - "etat_sanitaire"
              - "etat_sanitaire_rem"
      responses:
        '200':
          description: get dico successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeDico"
        '404':
          description: get dico response when table was not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - JWTAuth: []
  /gestion_com/secteurs:
    get:
      summary: Get dico values
      description: get dico values
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dico'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /gestion_com/emplacements:
    get:
      summary: Get dico values
      description: get dico values
      operationId: GetEmplacements
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dico'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /gestion_com/emplacements/{secteur}:
    get:
      summary: Get dico values
      description: get dico values for a given secteur
      parameters:
      - name: secteur
        in: path
        description: name of the secteur in which the emplacement is
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dico'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /gestion_com/emplacements/centroid/{emplacementId}:
    get:
      summary: Get centroid
      description: get centroid of a given emplacement
      parameters:
        - name: emplacementId
          in: path
          description: id of emplacement of which we want to know the centroid
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: get centroid succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmplacementCentroid'
        '404':
          description: get centroid response when no centroid was found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /thing/streets:
    get:
      summary: Streets list
      description: List of streets of city of Lausanne
      operationId: GetStreets
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dico'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /thing/buildings/numbers/{streetId}:
    get:
      summary: Buildings numbers list
      description: List of buildings numbers for a given street
      operationId: GetBuildingsNumbers
      parameters:
        - name: streetId
          in: path
          description: id of street
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dico'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /thing/buildings/center/{addressId}:
    get:
      summary: Center of building
      description: Get the center coordinates of a given building
      operationId: GetBuildingCenter
      parameters:
        - name: addressId
          in: path
          description: id of the address
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: get dico succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Center'
        '404':
          description: get dico response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{name}:
    get:
      summary: Get group by name
      description: Get the group data given its name
      operationId: GetGroupByName
      parameters:
        - name: name
          in: path
          description: name of the group
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: get group succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: get group response when not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Tree:
      required:
      - create_time
      - creator
      - id
      - is_active
      - name
      - geom
      - tree_attributes
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        description:
          minLength: 2
          type: string
        external_id:
          type: integer
          format: int32
        is_active:
          type: boolean
          default: true
        inactivation_time:
          type: string
          format: date-time
        inactivation_reason:
          type: string
        comment:
          type: string
        is_validated:
          type: boolean
          default: false
        id_validator:
          type: integer
          format: int32
        create_time:
          type: string
          format: date-time
        creator:
          type: integer
          format: int32
        last_modification_time:
          type: string
          format: date-time
        last_modification_user:
          type: integer
          format: int32
        geom:
          type: string
          pattern: '^POINT\(([0-9]{7})(\.[0-9]+)? ([0-9]{7})(\.[0-9]+)?\)$'
        tree_attributes:
          $ref: '#/components/schemas/TreeAttributes'
        #specific_attributes:
        #  type: object
    TreeList:
      required:
      - create_time
      - creator
      - id
      - is_active
      - name
      - geom
      - tree_att_light
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        description:
          minLength: 2
          type: string
        external_id:
          type: integer
          format: int32
        is_active:
          type: boolean
          default: true
        is_validated:
          type: boolean
        creator:
          type: integer
          format: int32
        create_time:
          type: string
          format: date-time
        geom:
          type: string
          pattern: '^POINT\(([0-9]{7})(\.[0-9]+)? ([0-9]{7})(\.[0-9]+)?\)$'
        tree_att_light:
          $ref: '#/components/schemas/TreeAttLight'
    ValidationList:
      required:
      - id
      - name
      - external_id
      - last_modification_user
      - last_modification_time
      - geom
      - tree_att_light
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 2
          type: string
        description:
          minLength: 2
          type: string
        external_id:
          type: integer
          format: int32
        is_validated:
          type: boolean
        last_modification_time:
          type: string
          format: string
        last_modification_user:
          type: string
          format: string
        geom:
          type: string
          pattern: '^POINT\(([0-9]{7})(\.[0-9]+)? ([0-9]{7})(\.[0-9]+)?\)$'
        tree_att_light:
          $ref: '#/components/schemas/TreeAttLight' 
    TreesToValidate:
      required:
      - external_id
      - is_validated
      - id_validator
      type: object
      properties:
        external_id:
          type: integer
          format: int32
        is_validated:
          type: boolean
        id_validator:
          type: integer
          format: int32
    Group:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        create_time:
          type: string
          format: date-time
        creator:
          type: integer
          format: int32
        last_modification_time:
          type: string
          format: date-time
        last_modification_user:
          type: integer
          format: int32
        is_active:
          type: boolean
          default: true
        inactivation_time:
          type: string
          format: date-time
        inactivation_reason:
          type: string
        comment:
          type: string
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    JsonWebToken:
      required:
      - token
      type: object
      properties:
        token:
          type: string
    TreeAttributes:
      required:
        - idthing
        - idvalidation
        - ispublic
      type: object
      properties:
        idthing:
          type: integer
          format: int32
        idvalidation:
          type: integer
          format: int32
        ispublic:
          type: boolean
        idtobechecked:
          type: integer
          format: int32
        idnote:
          type: integer
          format: int32
        circonference:
          type: integer
          format: int32
        identourage:
          type: integer
          format: int32
        idchkentourage:
          type: integer
          format: int32
        entouragerem:
          type: string
        idrevsurface:
          type: integer
          format: int32
        idchkrevsurface:
          type: integer
          format: int32
        revsurfacerem:
          type: string
        idetatsanitairepied:
          type: integer
          format: int32
        idetatsanitairetronc:
          type: integer
          format: int32
        idetatsanitairecouronne:
          type: integer
          format: int32
        etatsanitairerem:
          type: string
        envracinairerem:
          type: string
    TreeAttLight:
      required:
        - idvalidation
        - ispublic
      type: object
      properties:
        idvalidation:
          type: integer
          format: int32
        ispublic:
          type: boolean
    TreeDico:
      required:
        - id
        - value
      type: object
      properties:
        id:
          type: integer
          format: int32
        value:
          type: string
        is_active:
          type: boolean
        sort_order:
          type: integer
          format: int32
    Dico:
      required:
        - id
        - value
      type: object
      properties:
        id:
          type: integer
          format: int32
        value:
          type: string
        subtitle:
          type: string
    EmplacementCentroid:
      required:
        - geometry
        - surface
      type: object
      properties:
        geometry:
          type: string
        surface:
          type: number
          format: float
    Center:
      required:
        - geometry
      type: object
      properties:
        geometry:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
